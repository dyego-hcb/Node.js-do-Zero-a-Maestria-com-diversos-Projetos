-- Resumo Secao 09: Utilizando o Sequilize com Node.js - Curso Node.js do Zero a Maestria com diversos Projetos --

Este e o Resumo Secao 09: Utilizando o Sequilize com Node.js - Curso Node.js do Zero a Maestria com diversos Projetos, onde contera um resumo detalhado sobre o que foi visto na secao, tambem teremos na pasta exercicios/exercicio_video_aula os exemplos feitos na video aula e na pasta exercicios/exercicio_proposto os exercicios que foram propostos na video aula como aplicao pratica do conteudo da video aula. 

Nessa secao iremos utilizar o framework orm sequilze que ira resumir nossas consultas, como as querry que fazemos as consultas no bd, fazendo com que fique mais simples.

O que é ORM?
- Object Relational Mapper (ORM);
- Abstrai a complexidade das queries, para trabalharmos com métodos;
- Nos concentramos na regra de negócios e não nos comandos SQL, porem dependendo da consulta teremos que utilizar querry;
- Uma ORM muito utilizada para Node.js é a Sequelize;
- Em alguns casos uma ORM pode trazer prejuízos de performance;
- A query pura executa mais rapidamente do que a ORM;
- E temos código “gerado”, ou seja, não vemos por baixo dos panos;

O que é Sequelize?
- Uma ORM para Node.js;
- Ela é baseada em promises (then, catch);
- Tem integração para vários bancos relacionais, como o MySQL;
- Precisamos sempre criar um Model, que é o reflexo da nossa tabela em uma classe;
- Precisamos instalar o pacote, já que é um módulo externo;

Instalando o Sequelize
- Para instalar o Sequelize utilizamos o pacote sequelize;
- E para conectar precisamos passar os mesmos dados que no outro pacote: banco, usuário e senha;
- Instanciando a classe Sequelize;
- É possível checar a conexão com o método authenticate, onde devemos utilizar um try-catch, note abaixo a sintaxe para inicialzar a conexao com o sequilze:
const {Sequelize} = require('sequelize');

const nome_var_sequelize = new Sequelize('nome_bd', 'user', 'password', {
    host: 'host_name',
    dialect: 'bd_na,e'
});

try
{
    nome_var_sequelize.authenticate();
    console.log('BD Connect sucess with sequelize.');
}catch(err)
{
    console.log('Not possible connect to BD: ', err);
}

module.exports = sequelize;

OBS1: E necessario utilizar um drive mysql2 para o Sequilize funcionar

Criando um Model
- Para criar um Model temos que instanciar uma classe que representará uma tabela;
- Um Model User cria uma nova tabela chamada users;
- Colocamos os campos e os tipos dele como propriedades do Model;
- Futuramente ele será utilizado para as operações entre aplicação e banco;
- O método sync faz a criação das tabelas baseada nos models;
- Os models devem ficar na pasta models, visando boas praticas de programacao
- O metodo define define uma entidade
- Ao criar uma entidade com o sequilze, o mesmo cria 2 campos muitos importantos que sao a data de criacao e a data de att de regisrto, onde ambos serao analizados pelo sequilize

Inserindo dados
- Para inserir um dado vamos precisar do Model que criamos, ou seja, importar ele no arquivo de execução do comando;
- O método a ser utilizado é o create, nao precisa digitar a query
- Ele leva como parâmetro todos os campos, e insere o registro na tabela;

Lendo dados
- Para ler os dados de uma tabela vamos utilizar o método fetchAll, como utilizar o select sem o where;
- Que também requer o model, no nosso caso o User;
- Os dados vem em um objeto especial, para transformar em um array de objetos temos que inserir um parâmetro;
- Que é o raw como true, conseguimos exbir na tela os daods, como podemos ver na sintaxe abaixo:
await nomeClasse.findAll({raw: true});
OBS1 - await pra esperar ate que chega a resposta

Utilizando o WHERE
- Para filtrar dados com o Sequelize utilizando o WHERE, precisamos inserir um novo parâmetro;
- Que será o where, um objeto onde colocamos a propriedades e valores que queremos filtrar;
- E para retornar apenas um resultado podemos utilizar o método findOne;
- Com isso, obtemos a seguinte sintaxe:
await nomeClasse.findOne({raw: true, where: {nome_coluna: nome_var}});
OBS1: Colocar sempre o raw para nao vir info desnecessaria

Removendo itens
- Para remover itens utilizando o método destroy;
- A função vai ficar bem parecida com a de resgatar um usuário, pois utilizamos um filtro, sempre utilizar filtro em delete;
- Só que será um POST, e que efetua a remoção, depois redirecionamos;
- Precisamos também criar um formulário no front-end;

Editando itens
- O primeiro passo da edição é resgatar os dados do item;
- Com isso podemos preencher o formulário, para depois fazer o UPDATE;
- Vamos utilizar o método findOne, igual na rota de visualização;
- E fazer o preenchimento do form na nossa nova view;

Atualizando o dado no banco
- Para realizar a query de UPDATE vamos utilizar o método update do Sequelize;
- Nele passamos o objeto atualizado do item;
- E também filtramos por meio do atributo where, que item vamos atualizar, update e igual delete tem sempre que ter o where, porem passamos antes do where um objeto com os dados alterados;

Refazer as tabelas
- Podemos forçar a reconstrução das tabelas;
- No método sync, onde são sincronizados os models e as tabelas;
- Vamos colocar um atributo: force como true;
- Exemplo: sync({ force: true })
- Note que os dados são perdidos neste processo;
- Esse processo e muito utilizando quando iremos adicionar relacionamento a tabelas, quando temos alguma tabela ja populada.

Relacionamentos
- Em bancos relacionais podemos criar relacionamentos entre as tabelas;
- Para concretizar isso no Sequelize vamos precisar de dois Models, ou seja, precisamos criar mais um no nosso projeto;
- Depois precisamos inserir um método de relacionamento em algum dos models que vai criar a relação, pra isso podemos utilizar varios metodos, como por exemplo belongsTo tambem deve-se fazer um relacionamento para a tabela no referenciada, podendo ser hasMany ou hasOne
- Após o sync uma coluna que faz a relação entre as tabelas será criada;
- Que representa a FOREIGN KEY;

Adicionando dado relacionado
- Para adicionar o dado relacionado o fluxo é quase o mesmo;
- O grande detalhe é que precisamos passar o id do item que o relaciona;
- Podemos fazer com um input do tipo hidden;
- Dentro do form que contém os dados do novo item;
- E enviando para uma nova rota no nosso sistema;

Resgatando dados relacionados
- Precisamos definir as relações entre os dois Models, podemos fazer isso no Model de endereços;
- Depois basta utilizar o operador include com o nome do Model, onde estamos resgatando o dado;
- Isso faz com que os registros associados também venham na seleção;
- Como há dados relacionados, precisamos remover o raw;
- Para isso, utilizamos a seguinte sintaxe:
const var_ojb = await nomeClasse.findOne({ include: nomeTable, where: { nome_coluna: nome_var } });

res.render("nome_page", { nome_obj: nome_obj.get({plain: true}) });

OBS1: Para depurar funcoes assincronas, deve-se utilizar try catch

Removendo relacionados
- Para remover itens relacionados utilizaremos o mesmo processo de remoção de itens;
- Criaremos um formulário que envia o id do item;
- E uma rota para receber estas informações e executar a remoção, utilizando o método destroy;
