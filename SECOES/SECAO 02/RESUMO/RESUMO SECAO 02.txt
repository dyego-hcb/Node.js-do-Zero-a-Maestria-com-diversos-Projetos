-- Resumo Secao 02: Fundamentos de Node.js - Curso Node.js do Zero a Maestria com diversos Projetos --

Este e o Resumo Secao 02: Fundamentos de Node.js - Curso Node.js do Zero a Maestria com diversos Projetos, onde contera um resumo detalhado sobre o que foi visto na secao, tambem teremos na pasta exercicios/exercicio_video_aula os exemplos feitos na video aula e na pasta exercicios/exercicio_proposto os exercicios que foram propostos na video aula como aplicao pratica do conteudo da video aula. 

Nessa secao, iremos apender diversos recursos fundementais de node, como outros modulos, mandar argumentos por meios de linhas de comandos, sao itens que sao o alicerce do nodejs.

NOTA:
Nesta seção instalaremos um pacote que é chamado de chalk
Com a sua última atualização não podemos mais utilizá-lo com o require.
A solução para resolver este problema de modo fácil é:

1. Desinstale localmente a versão atual do Chalk usando npm uninstall chalk ;

2. Instale localmente a versão anterior à 5 usando npm install chalk@4.1.2 .
Ou:
1. Instale o pacote diretamente na versão 4.1.2 com npm install chalk@4.1.2

Para o que vamos fazer o curso, a versão 4 já é suficiente

Voltando ao conteudo do curso:

O que são módulos:
- Módulos são scripts reaproveitáveis, que utilizamos bastante programando em Node;
- Eles são divididos em três categorias;
- Internos: módulos que nós desenvolvemos;
- Core Modules: módulos que vem com o Node.js;
- Externos: módulos que instalamos via npm;

Módulos internos:
- Os módulos internos são criados nas pastas do nosso projeto;
- Precisamos exportar o módulo para poder dar o require, senao o node nao encotra o nosso modulo;
- Podemos utilizar a instrução module.exports, e padrao do node para exporta modulo, sua utilziacao e baseada na seguinte sintaxe:
module.expots = { nome_funcao atributos_func) { acoes_func } }
Ao passar exporta uma funcao, nao precisamos utilizar a tag function, e como se fosse um metodo, e o modole.expots reconhece como uma funcao, fazendo com que possa ser reaproveitado utilizando imports, utilizando o const nome_var_modulo = require('caminho_arquivo'), podemos tambem colocar/ecapsular a funcao em uma variavel, como const nome_var = nome_var_modulo.nome_metodo, note que nao passamos nada por parametros, apenas o nome da funcao, pois se passarmos algo por parametro estaremos inicializando a funcao e nao e isso que queremos, quermos apenas definr que aquela variavel pode chamar essa funcao, para simplificar a sintaxe
- Obs1: Ao passar o caminho no require sem utilizar o ./ para modulos internos, o node interpreta como core modules e da erro de nao encontrar aquele modulo.
- E importar onde precisamos utilizar;
- Para importar vamos utilizar a instrução require, com a seguinte sintaxe:
const nome_modulo = require('caminho_modulo');
const nome_metodo = nome_modulo.nome_metodo;

Export e Import:
- Com o Node.js também é possível utilizar o export e import do ES6;
- São funcionalidades mais modernas de importação e exportação;
- Com mais recursos do que as que vimos anteriormente;
- Para isso precisamos modificar os nossos arquivos para a extensão .mjs;
- E então podemos exportar uma com export default, como por exemplo, neste caso, precisamos da tag fuction agora, para expotar utilizando odefault, precisamos utilizar a seguinte sintaxe:
function nome_func(paramentro_func){ conteudo_func } export default nome_func;
- E importar com import, uma única função, caso seja necessário, utilizando a seguinte sintaxe:
import nome_func from 'caminho_arquivo'

- Obs1: Podemos notar que o import fica menor e um pouco mais logica

Core Modules:
- No Node temos diversos Core Modules, que são os que vêm prontos para serem utilizados;
- Eles resolvem diversos problemas, como: trabalhar com arquivos e diretórios, servir aplicações e etc.
- Precisamos importar estes módulos no projeto para poder utilizar;

- Obs1: No node, importamos apenas aquilo e precisamos, para fins de melhoria no desempenho.
- Obs2: Sempre chamar a variavel com o mesmo nome do modulo, para fins de boas praticas de programacao

Ler argumentos:
- O Node permite o envio de argumentos via linha de comando, utilizando a seguinte sintaxe:
Na linha de comando:
node nome_arquivo.js nome_arg=ConteudoArg
- Passamos eles após a instrução de execução do arquivo;
- Os argumentos ficam em um array chamado: process.argv
- Onde podemos fazer um loop e resgatar os valores enviados;
- Obs1: Podemos utilizar a anotacao ` String ${nome_var}` para compor uma string, onde ${nome_var} pega o valor da variavel e mostra na tela.

Módulos externos:
- Os módulos externos podem ser instalados via npm;
- Para isso precisamos inicializar o npm no projeto, com: npm init;
- A partir daí os módulos ficam mapeados e podemos instalar módulos, a partir de um arquivo chamado package.json;
- Que são salvos na pasta node_modules;
- Podemos instalar módulos com npm install <nome>;
- Obs1: Ate o presente momento, nao temos nenhum projeto iniciado com npm init, a partir deste projeto passaemos a utilizar bastante o npm init
- Obs2: Ao utiliza o npm init, o npm ira fazer varias perguntas sobre o projeto em si, basta aperta enter ou alterar se necessario.
- Obs3: Nessa secao, iremos utilizar um pacote chamado minimist, que ajudara a ler argumentos pela linha de comando, podemos instalar pacotes atraves da seguinte sintaxe:
npm install nome_pacote
- Obs4: Utilizando minimist, podemos passar os atributos via argumento utilizando o --nome_arg=conteudo_arg
- Obs5: Como definimos um nome no argumento, utilizanod o pacote minimist, podemos pegar o conteudo apenas chamando pelo index do arg que utilizando o minimist pode ser considerado o nome que foi dado no argumento, com as seguinte sintaxe nome_var_args['nome_arg'], fazendo com que a sintaxe fique mais enxuta

Algo prático com argumentos:
- Podemos utilizar os argumentos recebidos para aplicar no nosso programa alguma lógica, como por exemplo utilizar a funcao soma, podemos passar os numeros por paramento no argumentos;
- Basta encapsular em variáveis e depois utilizá-los;
- Ou seja, podemos a partir do terminal, executar também uma função de um módulo interno nosso, por exemplo;

Explorando o console:
- Temos uma grande variedade de métodos no console, como o console.log;
- Podemos imprimir mais de uma variável por vez, basta utilizar a ',' e colocar os nomes das variaveis;
- Inserir variáveis entre strings;
- Há um método para limpar as mensagens de console, com o metodo clear;
- Obs1: Temos a funcao count que conta que marca uma contagem
- OBS2: Utiliza-se O %S para imprimir String, outra maneira de interpolacao de string

Melhorando a visualização:
- Há um módulo externo chamado chalk;
- Ele pode deixar a visualização do console mais agradável;
- Fazendo com que seja possível expressar um feedback com base em cores;

Lendo entrada de dados:
- Podemos ler dados do usuário com o módulo readline, um Core Module, com a seguinte sintaxe:
const readline = require("readline").createInterface(
    {
        input: process.stdin //ENTRADA,
        output: process.stdout //SAIDA,
    }
)

O comando acima, sao configuracoes para o node conseguir receber e enviar dados para o usuario
- Neste caso utilizamos o método question, que faz uma pergunta a ser respondida pelo usuário, atraves da seguinte sintaxe:
readline.question('Sua pergunta', (nome_var) =>
{
    console.log(`String ${nome_var}`);
    readline.close();
});
Onde, utilizanod uma funcao anonima, recebemos por parametro algo que foi digitado pelo o usuario e conseguimos alocar o valor dela nessa variavel dentro da funcao anonima que esta sendo passada por paramentro na funcao question.
- Depois podemos processar a resposta e entregar um retorno;

Melhorando a leitura de dados:
- Há um módulo externo chamado inquirer;
- Que é muito mais completo para resgatar e lidar com o input do usuário;
- Além disso, é baseado em Promises, o que torna sua utilização mais simples;
- Ao utilizar o metodo .prompt() que e o metodo que ira fazer as perguntas, nos temos que pasasr um vetor de perguntas para ele, podendo conter n perguntas, e o conteudo desse vetor e composto por name e message, observe a sintaxe abaixo:
prompt([{name: 'name_ask', message: 'msg aks'}])
- Quando temos uma prompt, temos 2 metodos para utilizar que e o then((answers) => { comando_respostas }).catch(err => console.log(err)) para caso der algum erro, essa execao deve ser capturada e informada ao usuario

Event Loop: Devemos nos preocupar, mas sua acao e executada por de baixos dos panos
- O Event Loop é um recurso da arquitetura do Node;
- O Node.js executa uma linha por vez, e de cima para baixo do código escrito;
- Isso nos ajuda a evitar problemas de concorrência, garantindo a execução do código linha a linha;
- Precisamos apenas cuidar com bloqueios no fluxo, como loops infinitos;

Event Emitter: 
- O Event Emitter se comporta como os eventos do navegador;
- Podemos ativar um código em alguns pontos da aplicação, como o início, exemplo abaixo:
nome_obj_event_emitter.on('start', () => {contexto});
- É um Core Module chamado events;
- Precisamos instanciar a classe EventEmitter que vem deste módulo que na verdade e uma classe, atraves da seguinte sintaxe:
const nome_var_event_emitter = require('events');
const nome_obj_event_emitter = new nome_var_event_emitter();
- E então utilizar os métodos para atingir nosso objetivo, atraves da seguinte sintaxe:
nome_obj_event_emitter.emit('nome_evento');
- Podemos dizer que e uma execucao sincrona.

Síncrono e Assíncrono:
- Em Node.js temos duas opções ao executar métodos;
- Conhecidas como sync e async;
- Forma síncrona: o código espera ser totalmente executado para prosseguir;
- Forma assíncrona: o código continue progredindo e em um ponto futuro obtém a resposta da execução assíncrona;
- Temos diversa opcoes de core modules para trabalhar com metodos sincronos e asincronos, e tambem podemos criar funcoes sincrionas e asincrionas
- Deve-se tomar cuidado sobre qual metodo implementar, pois pode haver casos em que precisamos daquela informacao no momento mas ela nao esta disponivel devido a utilizacao de metodo assincronos
- Os metodos sincronos geralmente tem sync em seu nome

Erros no Node:
- Temos duas formas principais para gerar ou evidenciar erros em Node.js;
- throw: uma forma de encerrar um programa, gerando um novo erro, atraves da seguinte sintaxe:
throw new Error('Msg_error');
- try catch: uma forma de evidenciar algo que deu errado em um bloco de código e exibir a mensagem de erro, atraves da seguinte sintaxe:
try
{
    comando
}cath(err)
{
    console.log(`Erro: ${err}`);
}

Tarefa 02:
1. Crie um novo projeto que aceite pacotes externos;
2. Instale o inquirer e o chalk;
3. Utilize o inquirer para receber o nome e a idade do usuário;
4. Apresente esta resposta com uma cor de fundo amarela e texto preto;
5. Dica: Você pode utilizar bgYellow e black!
6. Insira um tratamento para um possível erro do inquirer com o catch;

Ao final desta seção, você estará familiarizado com os fundamentos cruciais do Node.js, preparando o terreno para explorar conceitos mais avançados nas próximas seções.